#1
def sumtree(tree):
    if type(tree) == int:
        return tree
    elif isleaf(tree):
        return datum(tree)
    else:
        s = 0
        for tr in tree[0:]:
            s += sumtree(tr)
        return s
        
  
#2
def maxdepth(tree):
    if isleaf(tree):
        return 1
    else:
        s = 1
        maxx = 0
        for tr in tree[1:]:
            if maxdepth(tr) >maxx:
                maxx = maxdepth(tr)
        s += maxx
        return s


#3
def checkmul(tree):
    if isleaf(tree):
        return True
    else:
        b = True
        p = 1
        for tr in tree[1:]:
            p *= datum(tr)
        if p != datum(tree):
            b = False
        b1 = True
        for tt in tree[1:]:
            b1 = b1 and checkmul(tt)
        return b and b1


#4
def helper(tree,curr):
    if isleaf(tree):
        return [curr+[datum(tree)]]
    else:
        res = []
        for child in tree[1:]:
            res += helper(child,curr+[datum(tree)])
        return res
def paths(tree):
    return helper(tree,[])
    
#5
def isbranch(branch,tree):
    if isleaf(tree):
        return (branch == tree)
    res = False
    for child in tree[1:]:
        res = res or isbranch(branch,child) or (branch==tree)
    return res


#6
def helper(tree,curr):
    if tree == []:
        return 0
    if isleaf(tree):
        return curr+datum(tree)
    else:
        cands = []
        for child in children(tree):
            cands.append(helper(child,curr+datum(tree)))
        return max(cands)
def max_sum(tree):
    return helper(tree,0)
    
#7
def evaltree(tree):
    if type(datum(tree)) == int:
        return bool(datum(tree))
    if datum(tree) == "a":
        res = True
        for child in children(tree):
            res = res and (evaltree(child))
        return res
    elif datum(tree) == "o":
        res = False
        for child in children(tree):
            res = res or evaltree(child)
        return res
    elif datum(tree) == "n":
        return not(datum(children(tree)[0]))
